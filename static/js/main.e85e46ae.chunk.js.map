{"version":3,"sources":["ImageCard.js","App.js","reportWebVitals.js","index.js"],"names":["parseSrc","image","farm","server","id","secret","ImageCard","props","useState","isOpen","setIsOpen","model","setModel","showImg","console","log","className","src","image_src","onClick","alt","style","position","open","App","pictures","setPictures","searchValue","setSearchValue","page","setpage","queries","setQueries","search","event","preventDefault","tag","target","query","url","fetch","then","resp","json","data","photos","photo","names","JSON","parse","localStorage","getItem","length","includes","push","splice","setItem","stringify","useEffect","a","response","concat","getAllPhotos","window","onscroll","scrollY","document","documentElement","scrollHeight","innerHeight","onSubmit","onBlur","type","value","onFocus","onChange","map","e","img","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e85e46ae.chunk.js","sourcesContent":["import React, { Fragment } from 'react'\r\n\r\nimport { useState } from 'react';\r\n\r\n\r\nfunction parseSrc(image){\r\n    // return  \"https://farm' + farmId + '.staticflickr.com/' + serverId + '/' + id + '_' + secret + '.jpg\"\r\n    return `https://farm${image.farm}.staticflickr.com/${image.server}/${image.id}_${image.secret}.jpg`\r\n}\r\nfunction ImageCard(props) {\r\n  const [isOpen,setIsOpen] = useState(false)\r\n  const [model, setModel] = useState(true)\r\n \r\n  function showImg(){\r\n      setIsOpen(!isOpen)\r\n      setModel(!model)\r\n      console.log(\"clicked\")\r\n      \r\n      \r\n  }\r\n\r\n   let a = model ? \"normal\" : \"click\";\r\n\r\n    // return (\r\n    //   <Fragment>\r\n    //     <li>\r\n    //       <img\r\n    //         onClick={showImg}\r\n    //         // className={a\r\n    //         src={parseSrc(props.image_src)}\r\n    //         alt={props.image_src}\r\n    //       />\r\n    //       {isOpen && (\r\n    //         <dialog\r\n    //           className={a}\r\n    //           style={{ position: \"fixed\" }}\r\n    //           open\r\n    //           onClick={showImg}\r\n    //         >\r\n    //           <img\r\n    //             onClick={showImg}\r\n    //            className={a}\r\n    //             src={parseSrc(props.image_src)}\r\n    //             alt={props.image_src}\r\n    //           />\r\n    //         </dialog>\r\n    //       )}\r\n    //     </li>\r\n    //   </Fragment>\r\n    // );\r\n    return (\r\n      \r\n        <li>\r\n          <img\r\n            className=\"small\"\r\n            src={parseSrc(props.image_src)}\r\n            onClick={showImg}\r\n            alt={props.image_src}\r\n          />\r\n          {isOpen && (\r\n            <dialog\r\n              className=\"dialog\"\r\n              style={{ position: \"fixed\" }}\r\n              open\r\n              onClick={showImg}\r\n            >\r\n              <img\r\n                className=\"image\"\r\n                src={parseSrc(props.image_src)}\r\n                onClick={showImg}\r\n                alt={props.image_src}\r\n              />\r\n            </dialog>\r\n          )}\r\n        </li>\r\n      \r\n    );\r\n}\r\n\r\nexport default ImageCard\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport ImageCard from \"./ImageCard\";\n\nconst pageNumber = 1;\n\n// the input box data is store in searchValue\n\nfunction App() {\n  const [pictures, setPictures] = useState([]);\n  const [searchValue, setSearchValue] = useState(\"\");\n  const [page, setpage] = useState(pageNumber);\n  const [queries, setQueries] = useState(null);\n\n  useEffect(() => {\n    const getAllPhotos = async () => {\n      await fetch(\n        \"https://www.flickr.com/services/rest/?method=flickr.photos.getRecent&api_key=4c3bbea6f1816a65e5188d6322acc462&format=json&nojsoncallback=1\"\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          setPictures([...pictures.concat(data.photos.photo)]);\n        });\n    };\n\n\n\n    getAllPhotos();\n  }, [page]);\n\n  const scrollToFind = () => {\n    setpage(page + 1);\n  };\n  //window.innerHeight + document.documentElement.scrollTop === document.documentElement.offsetHeight\n  window.onscroll = function () {\n    \n    if (\n      window.scrollY /\n      document.documentElement.scrollHeight >=0.95\n    )\n   \n    {\n       console.log(\"working\" ,window.scrollY , window.innerHeight,\n      document.documentElement.scrollHeight)\n      scrollToFind();\n\n    }\n  };\n\n  function updateSearchValue(event) {\n    // console.log(event.target.value)\n    setSearchValue(event.target.value);\n    \n  }\n\n  function search(event) {\n    event.preventDefault();\n    console.log(\"searching...\");\n    let tag = searchValue;\n    if(event.target.query){\n      tag = event.target.query\n    }\n    \n   \n    setQueries(null)\n    let url = `https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=e58db5c37e31c2add7ff47165e528488&safe_search=1&tags=${tag}&format=json&nojsoncallback=1`;\n    fetch(url)\n      .then((resp) => resp.json())\n      .then((data) => {\n        console.log({ data });\n        setPictures(data.photos.photo);\n        \n      });\n    let names = JSON.parse(localStorage.getItem(\"names\"));\n\n    if (names == null) {\n      names = [];\n    }\n    if (searchValue.length > 0 && !names.includes(searchValue)) {\n      names.push(searchValue);\n      if(names.length>5){\n        names.splice(0,1)\n      }\n      localStorage.setItem(\"names\", JSON.stringify(names));\n    }\n  }\n\n  //  function getData(){\n  //    const data = (localStorage.getItem('names'))\n  //    console.log(data)\n    \n  //  }\n  const searchQuery = () => {\n    console.log(\"ff\");\n    setSearchValue(\"query\");\n    // search()\n  };\n\n  \n  \n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"app-search-section\">\n          <div>\n            <h2>Search Photos</h2>\n            <form\n              onSubmit={search}\n              onBlur={() => {\n                setQueries(null);\n              }}\n            >\n              <input\n                type=\"text\"\n                value={searchValue}\n                onFocus={() => {\n                  const data = JSON.parse(localStorage.getItem(\"names\"));\n                  setQueries(data);\n                }}\n                onChange={updateSearchValue}\n              ></input>\n              <ul id=\"query-list\">\n                {queries &&\n                  queries.map((query) => (\n                    <li\n                      key={query}\n                      onClick={(e) => {\n                        console.log(\"ff\");\n                        setSearchValue(query);\n                        e.target.query = query;\n                        search(e);\n                      }}\n                    >\n                      {query}\n                    </li>\n                  ))}\n                {/* <li key=\"clear_btn\" onClick={searchQuery}>\n                  <button>JJ</button>\n                </li> */}\n              </ul>\n            </form>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"my-image\">\n        {pictures.length > 0 &&\n          pictures.map((img, i) => (\n            <ImageCard image_src={img} key={img.id + i} />\n          ))}\n      </div>\n    </div>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}